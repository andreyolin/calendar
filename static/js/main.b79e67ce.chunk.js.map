{"version":3,"sources":["utils/fetchClient.ts","components/Day/day.tsx","api/api.ts","components/EventForm/eventform.tsx","components/Calendar/calendar.tsx","App.tsx","index.tsx"],"names":["client","get","JSON","parse","localStorage","getItem","post","data","dayEvents","setItem","stringify","delete","eventid","newArrayOfDayEvents","filter","event","id","patch","newData","currentEvent","find","newDayEvents","Day","day","currentMonth","onSetCurrentEvent","onSetFormIsShowing","numberOfDay","dayOfWeek","month","currentEvents","dayId","className","cn","Number","map","onClick","title","EventForm","choosenDay","useState","setTitle","description","setDescription","date","setDate","time","setTime","useEffect","type","createdAt","required","placeholder","value","onChange","target","disabled","newEvent","moment","format","uuid","eventId","Calendar","year","setYear","setMonth","setChosenDay","formIsShowing","setFormIsShowing","setCurrentEvent","updateLocale","week","dow","startDay","startOf","arrayOfDays","start","countOfDays","currentDay","clone","push","add","dayOfArray","getArrayOfDays","currentFilters","saveFilters","undefined","currentYear","newDate","split","idToFind","reverse","join","neededDay","dayToShow","cell__isCurrent","dayOfCell","cell__isActive","cell__isNotCurrentMonth","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b79e67ce.chunk.js","sourcesContent":["import { dayEvent } from '../types/dayEvent';\n\nexport const client = {\n  get: () => JSON.parse((localStorage.getItem('events') || '[]')),\n  post: (data: dayEvent) => {\n    const dayEvents = client.get();\n\n    localStorage.setItem('events', JSON.stringify([...dayEvents, data]));\n  },\n  delete: (eventid: string) => {\n    const dayEvents:dayEvent[] = client.get();\n\n    const newArrayOfDayEvents = dayEvents.filter(event => event.id !== eventid);\n\n    localStorage.setItem('events', JSON.stringify([newArrayOfDayEvents]));\n  },\n  patch: (newData: dayEvent) => {\n    const dayEvents:dayEvent[] = client.get();\n\n    const currentEvent = dayEvents.find(event => newData.id === event.id);\n\n    const newDayEvents = dayEvents.filter(event => event.id !== currentEvent?.id);\n\n    localStorage.setItem('events', JSON.stringify([...newDayEvents, newData]));\n  },\n};\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { Dispatch, SetStateAction } from 'react';\nimport cn from 'classnames';\nimport { dayCell } from '../../types/dayCell';\nimport { dayEvent } from '../../types/dayEvent';\nimport { getAll } from '../../api/api';\n\ninterface Props {\n  day: dayCell,\n  currentMonth: number,\n  onSetCurrentEvent: Dispatch<SetStateAction<dayEvent | undefined>>\n  onSetFormIsShowing: Dispatch<SetStateAction<boolean>>\n}\n\nexport const Day: React.FC<Props> = ({\n  day, currentMonth, onSetCurrentEvent, onSetFormIsShowing,\n}) => {\n  const {\n    numberOfDay, dayOfWeek, month,\n  } = day;\n\n  const getDayEventsFromServer = () => {\n    const dayEvents: dayEvent[] = getAll();\n\n    return dayEvents;\n  };\n\n  const dayEvents = getDayEventsFromServer();\n\n  const currentEvents = dayEvents.filter(event => day.id === event.dayId);\n\n  return (\n    <div className=\"cell__content\">\n      <div className={cn(\n        'cell__description',\n        { 'cell__description--grey': Number(month) !== currentMonth },\n      )}\n      >\n        <p>{numberOfDay}</p>\n        <p>{dayOfWeek}</p>\n      </div>\n\n      <div>\n        {currentEvents.map(event => (\n          <span\n            key={event.id}\n            onClick={() => {\n              onSetFormIsShowing(true);\n              onSetCurrentEvent(event);\n            }}\n          >\n            {event.title}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { dayEvent } from '../types/dayEvent';\nimport { client } from '../utils/fetchClient';\n\nexport function getAll() {\n  return client.get();\n}\n\nexport function addOne(data: dayEvent) {\n  return client.post(data);\n}\n\nexport function deleteOne(eventId:string) {\n  return client.delete(eventId);\n}\n\nexport function updateOne(newData: dayEvent) {\n  return client.patch(newData);\n}\n","import moment from 'moment';\nimport React, {\n  Dispatch, SetStateAction, useEffect, useState,\n} from 'react';\nimport uuid from 'react-uuid';\nimport { addOne, deleteOne, updateOne } from '../../api/api';\nimport { dayCell } from '../../types/dayCell';\nimport { dayEvent } from '../../types/dayEvent';\n\ninterface Props {\n  onSetFormIsShowing: Dispatch<SetStateAction<boolean>>\n  choosenDay?: dayCell | null\n  currentEvent?: dayEvent\n}\n\nexport const EventForm: React.FC<Props> = ({ onSetFormIsShowing, choosenDay, currentEvent }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState(choosenDay?.date);\n  const [time, setTime] = useState('');\n\n  const handleSubmit = () => {\n    const newEvent = {\n      createdAt: moment().format('HH:mm d MMMM YYYY'),\n      id: uuid(),\n      dayId: choosenDay?.id,\n      title,\n      description,\n      date,\n      time,\n    };\n\n    if (!currentEvent) {\n      addOne(newEvent);\n    } else {\n      updateOne({\n        id: currentEvent?.id,\n        title,\n        date,\n        time,\n        dayId: choosenDay?.id,\n        description,\n      });\n    }\n\n    onSetFormIsShowing(false);\n  };\n\n  const setDataOfEvent = () => {\n    if (currentEvent) {\n      setTitle(currentEvent.title);\n\n      if (currentEvent.description) {\n        setDescription(currentEvent.description);\n      }\n\n      if (currentEvent.time) {\n        setTime(currentEvent.time);\n      }\n\n      setDate(currentEvent.date);\n    }\n  };\n\n  useEffect(() => {\n    setDataOfEvent();\n  }, [choosenDay]);\n\n  return (\n    <form className=\"eventForm\">\n      <div className=\"eventForm__title\">\n        <h2 className=\"eventForm__text\">Add new event</h2>\n\n        <button\n          className=\"eventForm__title__button\"\n          type=\"button\"\n          onClick={() => onSetFormIsShowing(false)}\n        >\n          X\n        </button>\n      </div>\n\n      <h3>Title*</h3>\n\n      {currentEvent && (\n        <p>{`Created at ${currentEvent?.createdAt}`}</p>\n      )}\n\n      <input\n        className=\"eventForm__titleInput\"\n        required\n        type=\"text\"\n        placeholder=\"Title goes here\"\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n      />\n\n      <input\n        type=\"text\"\n        className=\"eventForm__descriptionInput\"\n        placeholder=\"description\"\n        value={description}\n        onChange={(event) => setDescription(event.target.value)}\n      />\n\n      <div className=\"eventForm__dateInputs\">\n        <input\n          type=\"date\"\n          required\n          value={date}\n          onChange={(event) => setDate(event.target.value)}\n        />\n        <input\n          type=\"time\"\n          value={time}\n          onChange={(event) => setTime(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        disabled={!title || !date}\n        onClick={handleSubmit}\n      >\n        Save\n      </button>\n\n      {currentEvent && (\n        <button\n          type=\"submit\"\n          onClick={() => deleteOne(currentEvent?.id)}\n        >\n          Delete\n        </button>\n      )}\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport moment, { Moment } from 'moment';\nimport { Day } from '../Day';\nimport { dayCell } from '../../types/dayCell';\nimport { EventForm } from '../EventForm';\nimport { dayEvent } from '../../types/dayEvent';\n\nexport const Calendar: React.FC = () => {\n  const [year, setYear] = useState(Number(moment().format('YYYY')));\n  const [month, setMonth] = useState(Number(moment().format('M')));\n  const [choosenDay, setChosenDay] = useState<dayCell | null>(null);\n  const [formIsShowing, setFormIsShowing] = useState(false);\n  const [currentEvent, setCurrentEvent] = useState<dayEvent>();\n\n  const saveFilters = () => {\n    const currentFilters = {\n      year,\n      month,\n      choosenDay,\n    };\n\n    localStorage.setItem('filters', JSON.stringify(currentFilters));\n  };\n\n  const day = moment(`${year}-${month}-01`).format('D');\n\n  moment.updateLocale('en', { week: { dow: 1 } });\n  const startDay = moment(`${year}-${month}-${day}`).startOf('month').startOf('week');\n\n  const getArrayOfDays = (start: Moment) => {\n    const arrayOfDays = [];\n    let countOfDays = 1;\n    const currentDay = start.clone();\n\n    while (countOfDays <= 42) {\n      arrayOfDays.push(currentDay.clone());\n      currentDay.add(1, 'day');\n      countOfDays += 1;\n    }\n\n    return arrayOfDays.map(dayOfArray => ({\n      id: moment(dayOfArray).format('D') + moment(dayOfArray).format('M') + moment(dayOfArray).format('YYYY'),\n      date: `${moment(dayOfArray).format('YYYY')}-${moment(dayOfArray).format('MM')}-${moment(dayOfArray).format('DD')}`,\n      numberOfDay: moment(dayOfArray).format('D'),\n      dayOfWeek: moment(dayOfArray).format('dd'),\n      month: moment(dayOfArray).format('M'),\n      year: moment(dayOfArray).format('YYYY'),\n    }));\n  };\n\n  const arrayOfDays = getArrayOfDays(moment(startDay));\n\n  const isCurrentDay = (dayOfCell: dayCell) => {\n    return moment().format('YYYY M D') === `${dayOfCell.year} ${dayOfCell.month} ${dayOfCell.numberOfDay}`;\n  };\n\n  const handlePrevMonth = () => {\n    if (month === 1) {\n      setMonth(12);\n      setYear(currentYear => currentYear - 1);\n    } else {\n      setMonth(currentMonth => currentMonth - 1);\n    }\n  };\n\n  const handleNextMonth = () => {\n    if (month === 12) {\n      setMonth(1);\n      setYear(currentYear => currentYear + 1);\n    } else {\n      setMonth(currentMonth => currentMonth + 1);\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newDate = event.target.value.split('-');\n\n    const idToFind = newDate.map(date => Number(date)).reverse().join('');\n\n    const neededDay = arrayOfDays.find(dayOfArray => dayOfArray.id === idToFind) || null;\n\n    setYear(Number(newDate[0]));\n    setMonth(Number(newDate[1]));\n    setChosenDay(neededDay);\n  };\n\n  useEffect(() => {\n    const currentFilters = JSON.parse((localStorage.getItem('filters') || '[]'));\n\n    setYear(currentFilters.year);\n    setMonth(currentFilters.month);\n    setChosenDay(currentFilters.choosenDay);\n  }, []);\n\n  useEffect(() => {\n    saveFilters();\n  }, [year, month, choosenDay]);\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"calendar__header\">\n        <div className=\"calendar__header__form\">\n          <button\n            className=\"calendar__header__form__button\"\n            type=\"button\"\n            disabled={!choosenDay}\n            onClick={() => {\n              setCurrentEvent(undefined);\n              setFormIsShowing(!formIsShowing);\n            }}\n          >\n            +\n          </button>\n\n          {!choosenDay && (\n            <p>Please Choose a day to add event</p>\n          )}\n        </div>\n\n        <div className=\"calendar__header__nav\">\n          <div className=\"calendar__header__nav__chooser\">\n            <button\n              className=\"calendar__header__nav__chooser__button\"\n              type=\"button\"\n              onClick={handlePrevMonth}\n            >\n              {'<'}\n            </button>\n            <p>{`${moment(`${year}-${month}-1`).format('MMMM')} ${year}`}</p>\n            <button\n              className=\"calendar__header__nav__chooser__button\"\n              type=\"button\"\n              onClick={handleNextMonth}\n            >\n              {'>'}\n            </button>\n          </div>\n\n          <input\n            className=\"calendar__header__nav__date\"\n            type=\"date\"\n            value=\"\"\n            onChange={handleChange}\n          />\n        </div>\n\n      </div>\n\n      <div className=\"calendar__body\">\n        {formIsShowing && (\n          <EventForm\n            currentEvent={currentEvent}\n            choosenDay={choosenDay}\n            onSetFormIsShowing={setFormIsShowing}\n          />\n        )}\n        {arrayOfDays.map(dayToShow => (\n          <button\n            type=\"button\"\n            className={cn(\n              'cell',\n              { cell__isCurrent: isCurrentDay(dayToShow) },\n              { cell__isActive: choosenDay?.id === dayToShow.id },\n              { cell__isNotCurrentMonth: Number(dayToShow.month) !== month },\n            )}\n            key={dayToShow.id}\n            onClick={() => {\n              setChosenDay(dayToShow);\n              if (formIsShowing) {\n                setFormIsShowing(false);\n              }\n            }}\n          >\n            <Day\n              onSetFormIsShowing={setFormIsShowing}\n              onSetCurrentEvent={setCurrentEvent}\n              day={dayToShow}\n              currentMonth={month}\n            />\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\n\nimport { Calendar } from './components/Calendar';\n\nexport const App: React.FC = () => {\n  return (\n    <Calendar />\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}